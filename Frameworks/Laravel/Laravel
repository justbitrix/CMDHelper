app
  - controllers 
  - models
  - providers

bootstrap
  -event and process handler

resources
   -views

vendor
  -composer (system files)
--------------------------------------------------------- Main
php artisan --version       				 // Laravel version

php artisan list            				 // Get all commands

php artisan help migrate    				 // Get help

php artisan up
php artisan down       	    				 // Maintenance mode

php artisan config:cache    				 // Clear config cache

php artisan serve					 // Start laravel local server 
========================================================= Blade Templates & assets
blade.php   - require
saas - css compiler

@yield('content');  					 // This is fetch value
@section('sidebar'); 
@include();

@csrf

$errors in any template exist

{{ route(booking.create)}}  // output var, route is a global helper function!

you can create own custom templates

https://laravel.com/docs/5.0/templates!

https://momentjs.com/
https://www.layoutit.com/

for compiling assets use mix minify js css 
and chose different compillers like (less react ..)

npm install jquery					 // Add jQuery
npm install jquery-ui --save-dev	

							 // Add in bootstrap.js 
window.$ = window.jQuery = require('jquery');
window.$ = require('jquery-ui');

console.log(jQuery().jquery);	

The --save-dev option save only for dev pack

npm run dev   				    		 // Create compilling files
npm run watch  						 // Webpack will automatically recompile your 
							    assets when it detects a change

npm run production  					 // To build all css js and minify them

npm ls --depth=0
----------------------------------------------------------------------------------------
Before ES6, template literals were called as template strings. 
Unlike quotes in strings, template literals are enclosed by the backtick (` `) character 
(key below the ESC key in QWERTY keyboard)
----------------------------------------------------------------------------------------

dropzone - for upload files
========================================================= Forms

========================================================= Models
https://laravel.com/docs/6.x/eloquent#defining-models
php artisan make:model Ticket   			 // Use params   -mr   m - add migraton, r - add resource controller

php artisan make:model --factory Ticket  

$table = 'to assing table name';
========================================================= Route
php artisan route:cache
php artisan route:clear

Route::resources([
    'photos' => PhotoController::class,
    'posts' => PostController::class,
]);

Route::get('/test', [ArticleController::class, 'show']);
========================================================= Controller
// Each Controller relate to one table 

php artisan make:controller ArticleController		  // Empty class

php artisan make:controller ArticleController --resource  // Typical CRUD

php artisan make:controller ArticleController --invokable // With single action 
========================================================= Provider
php artisan make:provider EnvatoCustomServiceProvider
========================================================= Request
// Classes for validate : ValidatesRequests, AuthorizesRequest

Route->name('contact-form');				 // Named-follow route

Request::all();						 // All request info

$request->all()->dd();

$request->validate()    				 // Method for data validating

php artisan meke:request Contact        		 // Add handle outside controller      
========================================================= Exceptions

========================================================= AUTH   
// U should register policies in auth service providers class/ add in array

php artisan:make auth					// Create user authentication

[session, web
token, api
email, custom ]
========================================================= Policy (What user can do!)
php artisan meke:policy SitePolicy --model:Category
========================================================= Scope

========================================================= Observer

========================================================= Collections
chunk(index) use in db query,
first(); 
shufle();
========================================================= Middlewhare
php artisan meke:middlewhare Loggin

to define new MiddleWhere in class Kernel.php
========================================================= Eloquent ORM
https://laravel.com/docs/8.x/eloquent-relationships

Books::paginate(1)   					// 1 page count

booking->fill(request->input());
booking->save();
------------------------------------------------- One-to-one
hasOne() ->    <-belongsTo(), FK    User <-> Phone
------------------------------------------------- One-to-many
hasMany()->	<-belongsTo()       Blog <-> Comments
------------------------------------------------- Many-to-many
belongsToMany()-> <-belongsToMany()   User <-> Roles

php artisan make:migration CreateArticleUserTable --create=article_user

$user->articles()->detach();
$user->articles()->save($article);		        // Save into 2 tables articles and relations

$user->articles()->attach(11);			  	// Add relation in intermediate table
---------------------------------------------Soft-deleting 
is deleting a record from but not from database!

use SoftDeletes; 			     // Add in model

Booking::withTrashed();			     // Recover
========================================================= Migrations
https://laravel.com/docs/8.x/migrations#generating-migrations

php artisan migrate    					// Run all migrations

php artisan migrate:reset				// Rollback all migration

php artisan migrate:refresh				// Rollback and start all

php artisan migrate:rollback --step=1   		// 1 migration back down

php artisan schema:dump					// Squash migration to one file
php artisan schema:dump --prune				// Dump & remove all migrations
 
php artisan meke:migration create_hotel_tables 		// Create own migration

php artisan make:migration CreateArticleUserTable --create=article_user	// Intermediate table

add->comments()  					// To each row to explaing what does it mean

// Append new column
php artisan make:migration add_votes_to_article_table --table=articles   
========================================================= MAIL
if SMTP doesnt not configured u can change driver to [log] in env
	
mailtrap.io   						// Use for dev mail testing
========================================================= Database Seeding
php artisan make:seeder UserSeeder

php artisan db:seed    					// Run all seeds 
========================================================= Artisan tinker (query to the db)
DB::listen(function (query) {var_dump(query->sql);} );
========================================================= Composer
Composer dump-autoload					// Recover list classes autoload_classmap.php
========================================================= ENV
App::environment()				   	// get environment
========================================================= Dusk (Web Browser test)
php artisan test
========================================================= Queue
php artisan queue:table					// Generate table

php artisan make:job GenerateReport

php artisan queue:work --once
php artisan queue:work					// Start
php artisan queue:listen				// Ensures that a new instance of the app is created for every job, no need to restart
php artisan queue:restart				// Restart when new code
php artisan queue:failed			        // Get filed jobs
php artisan queue:flush					// Delete all failed jobs
========================================================= Scheduller
php artisan schedule:run
=========================================================

